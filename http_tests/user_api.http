###############################################################################
# ARQUIVO DE TESTES HTTP PARA ENDPOINTS DE USUÁRIO DO solar
# Compatível com REST Client para VS Code, Insomnia e Postman
###############################################################################

@baseUrl = http://localhost:8080/api/v1
@contentType = application/json
@authToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzQ0NDkwMDI2LCJpYXQiOjE3NDQ0ODgyMjYsImp0aSI6IjRlODNjNjgyOWZjZjQxYTA5NTYzZDdlMGVhOTE5Nzc2IiwidXNlcl9pZCI6ImFiYzczYjY0LTY3OTEtNDcyMy05OTg3LTFhZjBlNjI2Mzk2ZSJ9.FYJzM1-9bH2li1_-Ve8LXCloVDj30wfci8vxWmgrOSo

###
# 1. REGISTRO DE USUÁRIO
# Cria um novo usuário no sistema
POST {{baseUrl}}/auth/users/
Content-Type: {{contentType}}

{
  "email": "isis.araujo@outlook.com",
  "name": "joana da silva",
  "cpf": "12365678901",
  "celular": "79812345646",
  "patent": "SOLDADO",
  "password": "SenhaForte123!",
  "re_password": "SenhaForte123!"
}

###
# 2. ATIVAÇÃO DE CONTA
# Ativa a conta de usuário após receber o email de ativação
POST {{baseUrl}}/auth/users/activation/
Content-Type: {{contentType}}

{
  "uid": "N2VhYmZlNGItOGNmNy00NzY5LWJhZDEtNmVmMGIzY2IxYzMz",
  "token": "cotcx3-eb3f2487b540797a961e2e9cec904969"
}


###
# 3. LOGIN (OBTER TOKEN JWT)
# Login para obter o token JWT
POST {{baseUrl}}/auth/users/resend_activation/
Content-Type: {{contentType}}

{
  "email": "isis.araujo@outlook.com",
}
###
# 3. LOGIN (OBTER TOKEN JWT)
# Login para obter o token JWT
POST {{baseUrl}}/auth/jwt/create/
Content-Type: {{contentType}}

{
  "email": "usuario@teste.com",
  "password": "SenhaForte123!"
}

###
# 4. VERIFICAR TOKEN JWT
# Verifica se o token JWT é válido
POST {{baseUrl}}/auth/jwt/verify/
Content-Type: {{contentType}}

{
  "token": "{{authToken}}"
}

###
# 5. RENOVAR TOKEN JWT
# Obtém um novo token JWT usando o refresh token
POST {{baseUrl}}/auth/jwt/refresh/
Content-Type: {{contentType}}

{
  "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTc0NDU3Mjg1MiwiaWF0IjoxNzQ0NDg2NDUyLCJqdGkiOiJkMjA3ZGZlYTE5MzU0YjY0OGU3Mjg0NjgyNmQ2NGU4MyIsInVzZXJfaWQiOiJhYmM3M2I2NC02NzkxLTQ3MjMtOTk4Ny0xYWYwZTYyNjM5NmUifQ.vfTzp_eqaZmsxoxWkXgx-EyjISIgvmKCTQ18Jer8GE0"
}

###
# 6. OBTER PERFIL DO USUÁRIO ATUAL
# Retorna dados do usuário autenticado
GET {{baseUrl}}/auth/users/me/
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

###############################################################################
# CASOS DE TESTE PARA CAMPOS PERMITIDOS (DEVEM FUNCIONAR)
###############################################################################

###
# 7. ATUALIZAR CELULAR DO USUÁRIO (PERMITIDO)
# Atualiza o número de celular do usuário
PATCH {{baseUrl}}/auth/users/me/
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "celular": "83987654321"
}

###
# 8. ATUALIZAR EMAIL DO USUÁRIO (PERMITIDO COM SENHA ATUAL)
# Atualiza o email do usuário, exigindo a senha atual
PATCH {{baseUrl}}/auth/users/me/
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "email": "usuario@teste.com",
  "current_password": "SenhaForte123!"
}

###
# 9. ATUALIZAR SENHA DO USUÁRIO (VIA DJOSER)
# Método padrão do Djoser para alterar senha
POST {{baseUrl}}/auth/users/set_password/
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "current_password": "SenhaForte123!",
  "new_password": "NovaSenhaForte456!",
  "re_new_password": "NovaSenhaForte456!"
}

###
# 10. ATUALIZAR SENHA DO USUÁRIO (VIA ENDPOINT DE ATUALIZAÇÃO)
# Método alternativo usando o endpoint de atualização
PATCH {{baseUrl}}/auth/users/me/
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "current_password": "SenhaForte123!",
  "password": "NovaSenhaForte456!"
}

###
# 11. ATUALIZAR FOTO DO PERFIL (PERMITIDO)
# Para enviar arquivos, use form-data com uma ferramenta como Postman/Insomnia
# No VS Code REST Client, use --boundary como mostrado abaixo
POST {{baseUrl}}/auth/users/me/
Content-Type: multipart/form-data; boundary=boundary
Authorization: Bearer {{authToken}}

--boundary
Content-Disposition: form-data; name="photo"; filename="foto.jpg"
Content-Type: image/jpeg

< ./caminho/para/foto.jpg
--boundary--

###############################################################################
# CASOS DE TESTE PARA CAMPOS RESTRITOS (DEVEM FALHAR)
###############################################################################

###
# 12. TENTAR ATUALIZAR NOME (DEVE FALHAR)
PATCH {{baseUrl}}/auth/users/me/
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "name": "Nome Alterado Teste"
}

###
# 13. TENTAR ATUALIZAR CPF (DEVE FALHAR)
PATCH {{baseUrl}}/auth/users/me/
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "cpf": "98765432101"
}

###
# 14. TENTAR ATUALIZAR PATENTE (DEVE FALHAR)
PATCH {{baseUrl}}/auth/users/me/
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "patent": "CORONEL"
}

###
# 16. TENTAR ATUALIZAR STATUS DE ADMINISTRADOR (DEVE FALHAR)
PATCH {{baseUrl}}/auth/users/me/
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "is_admin": true
}

###
# 19. TENTAR ATUALIZAR STATUS CPI (DEVE FALHAR)
PATCH {{baseUrl}}/auth/users/me/
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "is_cpi": true
}

###
# 20. TENTAR ATUALIZAR STATUS DE OPERAÇÕES (DEVE FALHAR)
PATCH {{baseUrl}}/auth/users/me/
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "is_operacoes": true
}

###
# 21. TENTAR ATUALIZAR MÚLTIPLOS CAMPOS, MISTURANDO PERMITIDOS E NÃO PERMITIDOS
# Este teste deve falhar completamente devido aos campos não permitidos
PATCH {{baseUrl}}/auth/users/me/
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "celular": "83987654321",
  "name": "Nome Alterado",
  "is_admin": true,
  "patent": "CORONEL"
}

###
# Login para obter o token JWT
POST {{baseUrl}}/auth/jwt/create/
Content-Type: {{contentType}}

{
  "email": "admin@solar.com",
  "password": "Teste123@"
}
###
# 22. CASOS PARA ADMINISTRADOR (COM TOKEN DE ADMIN)
# NOTA: Substitua @adminToken pelo token de um usuário administrador admin@solar.com
@adminToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzQ0NDkyMDAxLCJpYXQiOjE3NDQ0OTAyMDEsImp0aSI6IjI4YjMyY2VkODIxZDQ3ZDBhZDEyMDA0YWViMTZmODIxIiwidXNlcl9pZCI6IjIxOWU1NDM0LTkyZjMtNDdlYS1hN2E5LTBlMTQ3ODQ4NWI3MCJ9._F7xj8RUXHQoTSlBwl9RcaQ47-1mJ5bubvyacEIcud4

###
# 23. ADMIN: ATUALIZAR QUALQUER CAMPO DE OUTRO USUÁRIO
# Administradores devem poder atualizar qualquer campo de outro usuário
PATCH {{baseUrl}}/auth/users/abc73b64-6791-4723-9987-1af0e626396e/
Content-Type: {{contentType}}
Authorization: Bearer {{adminToken}}

{
  "name": "Nome Alterado Pelo Admin",
}

###
# 24. DELETAR CONTA DE USUÁRIO
# Remove a própria conta (requer senha)
DELETE {{baseUrl}}/auth/users/me/
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "current_password": "NovaSenhaForte456!"
}
